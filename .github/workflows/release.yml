name: CI/CD for MetaRang Frontend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      # Install jq for processing JSON files
      - name: Install jq
        run: sudo apt-get install -y jq

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the project
      - name: Build the project
        run: npm run build

      # Zip dist folder and ensure output.zip exists
      - name: Zip dist folder
        run: |
          zip -r $GITHUB_WORKSPACE/output.zip dist/
          echo "output.zip created"

      # List workspace folder contents (for debugging)
      - name: List workspace contents
        run: ls -la $GITHUB_WORKSPACE

      # Verify that output.zip exists
      - name: Check if output.zip exists
        run: |
          if [ -f "$GITHUB_WORKSPACE/output.zip" ]; then
            echo "output.zip exists"
          else
            echo "output.zip does not exist"
            exit 1
          fi

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code again
      - name: Checkout code
        uses: actions/checkout@v2

      # Install jq for processing JSON files (in release job as well)
      - name: Install jq
        run: sudo apt-get install -y jq

      # Extract current version from package.json
      - name: Extract version from package.json
        id: extract_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      # Generate tag name based on Semantic Versioning
      - name: Generate tag name
        id: generate_tag
        run: |
          VERSION=${{ env.VERSION }}
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          PATCH=$(echo $VERSION | cut -d'.' -f3)
          
          # Logic for changing MAJOR, MINOR, PATCH dynamically
          if [[ $GITHUB_COMMIT_MESSAGE == *"BREAKING CHANGE"* ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [[ $GITHUB_COMMIT_MESSAGE == *"feat"* ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi

          TAG_NAME="v${MAJOR}.${MINOR}.${PATCH}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "Release ${{ env.TAG_NAME }}"
          body: |
            This is an automatic release generated by GitHub Actions.
          draft: false
          prerelease: false
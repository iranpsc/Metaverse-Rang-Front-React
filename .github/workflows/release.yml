name: CI/CD for MetaRang Frontend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Extract commit message
      - name: Get commit message
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      # Bump version in package.json based on commit message
      - name: Bump version
        run: |
          COMMIT_MESSAGE=$GITHUB_COMMIT_MESSAGE
          CURRENT_VERSION=$(jq -r ".version" package.json)
          VERSION_ARRAY=(${CURRENT_VERSION//./ })
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}

          # Check the commit message for specific keywords
          if [[ "$COMMIT_MESSAGE" == *"BREAKING CHANGE"* ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          elif [[ "$COMMIT_MESSAGE" == *"feat"* ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          else
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          fi

          echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json

      # Commit the version bump
      - name: Commit version bump
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          git push

      # Build the project
      - name: Build the project
        run: npm run build

      # Zip dist folder and ensure output.zip exists
      - name: Zip dist folder
        run: |
          zip -r $GITHUB_WORKSPACE/output.zip dist/
          echo "output.zip created"

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code again
      - name: Checkout code
        uses: actions/checkout@v2

      # Generate tag name based on updated version
      - name: Generate tag name from package.json
        id: generate_tag
        run: |
          VERSION=$(jq -r ".version" package.json)
          echo "TAG_NAME=v$VERSION" >> $GITHUB_ENV

      # Create GitHub Release 1
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "Release ${{ env.TAG_NAME }}"
          body: |
            This is an automatic release generated by GitHub Actions.
          draft: false
          prerelease: false
